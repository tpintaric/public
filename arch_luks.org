* Installing Arch with Luks Encryption
- Boot with arch iso
- WiFi:
  - iwctl:
    - station wlan connect "SKYNET"
    - exit
- ping archlinux.org   :check:
- reflector -c Canada -a 6  --sort rate --save /etc/pacman.d/mirrorlist

** UEFI System Disk Luks Partitions
- Setup fast download speeds: reflector -c Canada -a 6 --sort rate --save /etc/pacman.d/mirrorlist
- Check if you booted into UEFI or CMS/BIOS mode:
  - Check if there is a directory /sys/firmware/efi                     :check:
- lsblk
  - gdisk //dev/nvme0n1/
    - p  to print all partition table
    - n - new partition:  Partition number 1, first sector = default, last sector: +200M                 ef00
    - n - new partition:  Partition number 2, first sector = default, last sector <enter> all space Linux
    - w - write to disk and exit
- cryptsetup -v -y luksFormat /dev/nvme0n1p2   -> Remaining disk, YES to confirm,  passphrase
- To open this partition now: cryptsetup open /dev/nvme0n1p2 crypt    => this will become /dev/mapper/crypt device afterwards  -> Type in password and now we have it open
- Format new crypt partition:  mkfs.ext4 /dev/mapper/crypt  -> Enter
- Format boot partition:    mkfs.fat -F32 /dev/nvme0n1p1
- lsblk  to check partitions now.

** Mount our partitions
- mount /dev/mapper/crypt /mnt
- mkdir /mnt/boot
- mount /dev/nvme0n1p1 /mnt/boot
- Test with lsblk:
#+begin_src conf
    nvme0n1     259:0    0 476.9G  0 disk  
    ├─nvme0n1p1 259:3    0   200M  0 part  /mnt/boot
    └─nvme0n1p2 259:4    0 476.7G  0 part  
    └─crypt   254:0    0 476.7G  0 crypt /mnt
#+end_src

** Install base system
- pacstrap /mnt base linux linux-firmware vim nano amd-ucode   (or intel-ucode)

** Generate File system table
- genfstab -U /mnt >> /mnt/etc/fstab

** Entering Installation
- arch-chroot /mnt 
*** Create swap file
- fallocate -l 6GB /swapfile
- Set read only permission:   chmod 600 /swapfile
- make swap:  mkswap /swapfile
- turn on swap: swapon /swapfile
- Enter this swap into fstab:
  - vim /etc/fstab
    - New line:
      - Type in: /swapfile none swap defaults 0 0           => swap file, mount point none, fs type = swap, options defaults, fs checks 0 0 
*** Localization: Time Zone
- ls -sf /usr/share/zoneinfo/America/Edmonton /etc/localtime
- hwclock --systohc  -> to sync clock
*** Localization: Generate locale
- vim /etc/locale.gen  => Uncomment line #en_US.UTF-8 UTF-8    :wq to sa save and exit
- Generate locale by running:    locale-gen
- Set lang variable by running: echo >> LANG=en_US.UTF-8 /etc/locale.conf
*** Hostname
- vim /etc/hostname:   insert hostname here:  slackwad
*** Hosts file
- vim /etc/hosts
  -> insert lines:
     127.0.0.1           localhost
     ::1                      localhost
     127.0.0.1          slackwad
*** Root password
- passwd
  - Enter password
*** Install packages (Essential)
- pacman -S grub efibootmgr networkmanager network-manager-applet wireless_tools wpa_supplicant dialog os-prober mtools dosfstools base-devel linux-headers reflector git bluez bluez-utils pulseaudio-bluetooth xdg-utils xdg-user-dirs   => enter , Accept defaults
*** Adding encryption to our kernel modules
- vim /etc/mkinitcpio.conf
    - Find HOOKS part in the file and insert "encrypt" after "block" text   :wq
- Recreate initram by executing mkinitcpio -p linux
*** Grub install
- grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
- grub-mkconfig -o /boot/grub/grub.cfg

**** Tell Grub which encryption partion we will use due to crypt
- check which ID we are going to use:
  - execute: blkid > /etc/temp.txt
  - vim /etc/temp.txt   -> Find UUID of the /dev/nvme0n1p2  and copy it   :wq to close
  - Find and update line in /etc/default/grub:  GRUB_CMDLINE_LINUX="cryptdevice=UUID=<copyUUID we did >:crypt root=/dev/mapper/crypt"
- Regenerate grub config by executing: grub-mkconfig -o /boot/grub/grub.cfg
*** Enable Network Manager to start when we boot
- systemctl enable NetworkManager
- systemctl enable bluetooth
*** Create a user
- useradd -mG wheel tomek
- passwd tomek   -> create a password
*** Add to sudo privileges
- EDITOR=vim visudo
- Navigate down to where it says # %wheel...
    - Uncomment this line :wq to save and close
*** Exit installation
- exit
- Then umount -a to unmount installation points.
- reboot to reboot the system into our new installation
- Working on T16 Thinkpad laptop :check:
* Initial Configuration
- nmtui: Activate wireless connection: Connect to SSID visible
- sudo reflector -c Canada -a 6  --sort rate --save /etc/pacman.d/mirrorlist
** Disable terminal bell
- sudo vim /etc/inputrc
  - Uncomment:   set bell-style none

** Install AUR (yay)
- mkdir ~/temp
- git clone https://aur.archlinux.org/yay.git
- cd yay
- makepkg -si PKGBUILD

** Install video graphics
- sudo pacman -S xf86-video-amdgpu

** Modify Reflector sources
- sudo vim /etc/xdg/reflector/reflector.conf
- Uncomment and make:       --country  Canada, United States
  
** Install apps
- sudo pacman -S neovim nodejs tmux npm firefox
- sudo pacman -S xdg-desktop-portal
- sudo pacman -S thunderbird thunar gimp emacs
- sudo pacman -S bash-completion i3 i3-gaps dmenu rofi i3lock xss-lock
- sudo pacman -S kitty rsync
- sudo pacman -S xorg xorg-init xorg-twm xterm nitrogen picom xf86-video-fbdev nitrogen picom xorg-fonts-100dpi xorg-fonts-75dpi autorandr
- pacman -S xf86-input-libinput synaptics
** Display Manager:  Lightdm
- Used to display a graphical display manager after shell boot.
- sudo pacman -S lightdm
- sudo systemctl enable lightdm

*** Install greeter
- sudo pacman -S lightdm-gtk-greeter:
- Modify greeter for lightdm in:
  /etc/lightdm/lightdm.conf

#+begin_src conf
[Seat:*]
...
greeter-session=lightdm-yourgreeter-greeter
...
#+end_src
- Install lightdm-settings package from AUR

** Install OMF fish shell framework
- sudo pacman -S kitty
- Navigate to: https://github.com/oh-my-fish/oh-my-fish
- sudo pacman -S fish
- Run this command:
  curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish
- omf install cbjohnson
- omf theme cbjohnson

** Turn on Num-Lock
- cd Downloads
- git clone https://aur.archlinux.org/mkinitcpio-numlock.git
- cd mkinitcpio-numlock
- makepkg -si


*** Load DWM at startup
- sudo nvim /usr/share/xsessions/dwm.desktop 
  Content:      Save and close
  #+begin_src conf
    [Desktop Entry]
    Encoding=UTF-8
    Name=dwm
    Comment=Dynamic window manager
    Exec=dwm
    Icon=dwm
    Type=XSession 
  #+end_src

** Temporary enable SSH server on new laptop
- sudo pacman -S openssh
- sudo systemctl enable sshd
- sudo systemctl start sshd
** Copy Data via Rsync
- rsync -azP -e  "ssh -p 22" ~/Music/ tomek@172.16.2.95:/home/tomek/Music/
- Repeat for all other folders:

** Manual LAN Connection setup
- Use nmcli rather than nmtui because it can be buggy and will disconnect otherwise:
- Give your ethernet connection a name like LAN1

#+begin_src conf
  nmcli connection modify LAN1 ipv4.method manual ipv4.addresses 10.2.0.50/8 ipv4.gateway 10.0.0.1 ipv4.dns 10.3.0.6
#+end_src

** Disable and Stop SSHD

** Install Firewall-cmd
- Block all incoming ports
